{"version":3,"sources":["myAvatar.png","PostCard.js","ProfileCard.js","actions/index.js","AppUsers.js","UserComments.js","actions/comments.js","AppComments.js","actions/posts.js","AppPosts.js","UserDetail.js","AppUserDetail.js","TodosCard.js","actions/toDos.js","AppTodos.js","App.js","serviceWorker.js","reducers/users.js","reducers/posts.js","reducers/toDos.js","reducers/comments.js","reducers/index.js","index.js"],"names":["module","exports","PostCard","toComments","this","props","post","id","className","title","body","to","React","Component","ProfileCard","ViewDetail","user","src","image","alt","name","username","email","fetchUsers","users","type","payload","AppUsers","buildList","data","onFetchUsers","fetch","then","response","json","catch","error","setState","console","log","loadUsers","userList","map","key","mapActionsToState","connect","state","UserComments","comment","fetchComments","comments","AppComments","onFetchComments","length","url","match","params","ID","commentSection","fetchPosts","posts","AppPosts","onFetchPosts","userId","postList","UserDetail","toPost","detail","toTodos","AppUserDetail","details","isLoaded","detailsArray","push","detailSection","message","TodosCard","string","todo","completed","fetchTodos","todos","AppTodos","onFetchTodos","userID","todosList","App","basename","exact","path","component","Boolean","window","location","hostname","UserReducer","action","PostsReducer","TodosReducer","CommentsReducer","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.073451f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/myAvatar.c3521c9e.png\";","import React from 'react'\nimport './PostCard.css'\nimport {NavLink} from 'react-router-dom'\n\n\nclass PostCard extends React.Component {\n    render() {\n        const toComments = `/comments/${this.props.post.id}`\n        \n    return(\n        <div className=\"PostCard\" >\n             <div className=\"card-body\">      \n                <p className=\"post-title\">{this.props.post.title}</p>\n                <p className=\"post-body\">{this.props.post.body}</p>  \n                <NavLink to={toComments}>View Comments</NavLink>\n            </div>\n           \n        </div>\n\n        \n    )\n    }\n}\n\nexport default PostCard","import React from 'react';\nimport './ProfileCard.css'\nimport image from './myAvatar.png'\nimport './PostCard'\nimport {NavLink} from 'react-router-dom'\n\n class ProfileCard extends React.Component {\n\n   \n    render(){ \n       \n        const ViewDetail = `/users/${this.props.user.id}`\n\n    return (\n        <div className=\"ProfileCard\" >\n            <div className=\"card-avatar\">\n                 <img src={image} alt=\"\"/>\n            </div>\n            <div className=\"card-body\">\n            <p className=\"profile-name\">\n            {this.props.user.name}<br />\n            <span className=\"profile-login\">{this.props.user.username}</span>\n            </p>\n\n            <p className=\"profile-bio\">{this.props.user.email}</p>\n\n          \n            <NavLink to={ViewDetail}>ViewDetails</NavLink>\n        \n\n            </div>\n        </div>\n    )\n\n}\n}\n\nexport default ProfileCard","\n const fetchUsers = (users) => {\n    return {\n        type: \"FETCH_USERS\",\n        payload: users\n    }\n}\n\nexport default fetchUsers\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport ProfileCard from './ProfileCard'\nimport fetchUsers from './actions/index'\n  \nclass AppUsers extends React.Component {\n\n    buildList = (data)=>{\n        this.props.onFetchUsers(data)\n    }\n\n    loadUsers() {\n\n        let url = 'https://jsonplaceholder.typicode.com/users'\n        fetch(url)\n        .then(response => response.json())\n        .then(this.buildList)\n        .catch(error => {\n            this.setState({error:error})\n        })\n    }\n\n\n    componentDidMount() {\n        console.log('did mount')\n        this.loadUsers()\n    }\n\n\n    render () {\n       \n        \n        const {users} = this.props;\n        const userList = users.map(user => (\n            <ProfileCard key={user.id} user = {user} id={user.id}/>   \n        )\n        )                 \n        console.log(this.props)\n        \n     \n        return (           \n            <div>\n                <nav className=\"nav\">\n                    <h1>Users</h1>\n                </nav>\n           <section className=\"user-list\">\n               {userList}\n           </section>\n            </div>\n       \n        );\n    }\n   \n}\n    const mapStateToProps = state => {\n       \n        return state\n    }\n\n    const mapActionsToState = {\n        onFetchUsers: fetchUsers\n    }\n\n    \nexport default connect (mapStateToProps, mapActionsToState)(AppUsers)","import React from 'react'\nimport './PostCard.css'\nimport './CommentsCard.css'\n\n\nclass UserComments extends React.Component {\n    render() {\n    return(\n        <div className=\"CommentCard\" >\n             <div className=\"card-body\">      \n                <p className=\"comment-title\">Email: {this.props.comment.email}</p>\n                <p className=\"comment-body\">{this.props.comment.body}</p>  \n            </div>\n        </div>       \n    )\n    }\n}\n\nexport default UserComments","const fetchComments = (comments) => {\n    return {\n        type: \"FETCH_COMMENTS\",\n        payload: comments\n    }\n}\n\nexport default fetchComments\n","import React from 'react'\nimport UserComments from './UserComments'\nimport {connect} from 'react-redux'\nimport fetchComments from './actions/comments';\n\n\n\nclass AppComments extends React.Component{\n\n    buildList = (data)=>{\n        console.log(data)\n        this.props.onFetchComments(data)\n    }\n\n    componentDidMount() {\n        console.log('Details did mount')\n        if (this.props.comments.length === 0) {\n        let url = `https://jsonplaceholder.typicode.com/comments?postId=${this.props.match.params.ID}`\n        fetch(url)\n        .then(response => response.json())\n        .then(this.buildList)\n        .catch(error => {\n            this.setState({error:error})\n        })\n    }\n    }\n\n    render(){\n\n        const {comments} = this.props\n        console.log(comments)\n        const commentSection = comments.map(comment => (\n            <UserComments key={comment.id} comment = {comment} id={comment.id}/>\n          \n        )\n        )\n       \n        return(\n            <div>\n                <nav className=\"nav\">\n                    <h1>Comments</h1>\n                    </nav>\n            <section className=\"user-detail\">\n                {commentSection}\n            </section>\n            </div>\n        )\n    }\n    }\n\nconst mapStateToProps = state => {\n       \n    return state\n}\n\nconst mapActionsToState = {\n    onFetchComments: fetchComments\n}\n\n\nexport default connect (mapStateToProps, mapActionsToState)(AppComments)","const fetchPosts = (posts) => {\n    return {\n        type: \"FETCH_POSTS\",\n        payload: posts\n    }\n}\n\nexport default fetchPosts","import React from 'react'\nimport {connect} from 'react-redux'\nimport PostCard from './PostCard'\nimport fetchPosts from './actions/posts'\n\n\n\nclass AppPosts extends React.Component {\n    \n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         error: null,\n    //         isLoaded: false, \n    //         posts: []\n    //     }\n    // }\n\n    buildList = (data)=>{\n        console.log(data)\n        this.props.onFetchPosts(data)\n    }\n\n    componentDidMount() {\n        console.log('Posts did mount')\n        let url = `https://jsonplaceholder.typicode.com/posts?userId=${this.props.match.params.userId}`\n        if (this.props.posts.length === 0) {\n        fetch(url)\n        .then(response => response.json())\n        .then(this.buildList)\n        .catch(error => {\n            this.setState({error:error})\n        })\n    }\n    }\n           \n        render(){\n            const {posts} = this.props\n            const postList = posts.map(post => (\n                <PostCard key={post.id} post = {post} id={post.id}/>         \n            )\n        )\n            return(\n                <div className=\"main\">\n                    <nav className=\"nav\">\n                        <h1>Posts</h1>\n                    </nav>\n                <section className=\"post-list\">\n                {postList}\n            </section>\n            </div>\n                \n\n            )\n            }\n        }\n    \n    const mapStateToProps = state => {\n        return state\n    }\n\n    const mapActionsToState = {\n        onFetchPosts: fetchPosts\n    }\n\n    \nexport default connect (mapStateToProps, mapActionsToState)(AppPosts)","import React from 'react'\nimport './ProfileCard.css'\nimport image from './myAvatar.png'\nimport {NavLink} from 'react-router-dom'\n\nclass UserDetail extends React.Component{\n\n\n    render(){\n        const toPost = `/posts/${this.props.detail.id}`\n        const toTodos = `/todos/${this.props.detail.id}`\n        \n        return(\n            <div className=\"ProfileCard\" >\n            <div className=\"card-avatar\">\n                 <img src={image} alt=\"\"/>\n            </div>\n            <div className=\"card-body\">\n            <p className=\"profile-name\">\n            {this.props.detail.name}<br />\n            <span className=\"profile-login\">{this.props.detail.username}</span>\n            </p>\n\n            <p className=\"profile-bio\">{this.props.detail.email}</p>\n            <NavLink to={toPost} >View Post</NavLink>\n            <NavLink to={toTodos} >View Todos</NavLink>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default UserDetail","import React from 'react'\nimport UserDetail from './UserDetail';\n\n\nclass AppUserDetail extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n            error: null,\n            isLoaded: false,\n            details: []\n        }\n    }\n\n    buildList = (data)=>{\n        console.log(data)\n        this.setState({\n            details: data,\n            isLoaded: true\n        })\n    }\n\n\n\n\n    componentDidMount() {\n        console.log('Details did mount')\n        let url = `https://jsonplaceholder.typicode.com/users/${this.props.match.params.id}`\n        fetch(url)\n        .then(response => response.json())\n        .then(this.buildList)\n        .catch(error => {\n            this.setState({error:error})\n        })\n    }\n\n    render(){\n\n        const {error, isLoaded, details} = this.state\n        const detailsArray = []\n        detailsArray.push(details)\n        const detailSection = detailsArray.map(detail => (\n            <div>\n                <h1 className=\"nav\" >{detail.name}</h1>\n            <UserDetail key={detail.id} detail = {detail} id={detail.id}/>\n            </div>\n          \n        )\n        )\n        if(error){\n            return <div>Error: {error.message}</div>\n        } else if(!isLoaded){\n            return <div>Loading...</div>\n        } else {\n        return(\n          \n               \n            <section className=\"user-detail\">\n                {detailSection}\n            </section>\n            \n\n        )\n    }\n    }\n}\n\n\n\n\nexport default AppUserDetail","import React from 'react'\nimport \"./TodosCard.css\"\n\n\n\nclass TodosCard extends React.Component {\n    render() {\n        const completed = this.props.todo.completed\n        let string = \"\"\n         if(completed === true){\n             string = \"Yes\"\n         } else {\n             string = \"No\"\n         }\n    \n\n    return(\n        <div className=\"TodosCard\" >\n             <div className=\"card-body\">      \n                <p className=\"Todos-title\">Title: {this.props.todo.title}</p>\n                <p className=\"Todos-body\">Completed: {string}</p>  \n            </div>\n        </div>\n\n        \n    )\n    }\n}\n\nexport default TodosCard","const fetchTodos = (todos) => {\n    return {\n        type: \"FETCH_TODOS\",\n        payload: todos\n    }\n}\n\nexport default fetchTodos","import React from 'react'\nimport {connect} from 'react-redux'\nimport TodosCard from './TodosCard'\nimport fetchTodos from './actions/toDos';\n\nclass AppTodos extends React.Component {\n    \n    constructor(props) {\n        console.log(props)\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false, \n            todos: []\n        }\n    }\n\n    buildList = (data)=>{\n        console.log(data)\n       this.props.onFetchTodos(data)\n    }\n\n    componentDidMount() {\n        console.log('Posts did mount')\n        let url = `https://jsonplaceholder.typicode.com/todos?userId=${this.props.match.params.userID}`\n        console.log(this.props.todos.length)\n        if (this.props.todos.length === 0) {\n        fetch(url)\n        .then(response => response.json())\n        .then(this.buildList)\n        .catch(error => {\n            this.setState({error:error})\n        })\n    }\n    }\n    \n        render () {\n            const {todos} = this.props\n            const todosList = todos.map(todo => (\n                <TodosCard key={todo.id} todo = {todo} id={todo.id}/>\n              \n            )\n            )\n\n           \n                  return(\n                      <div>\n                          <nav className=\"nav\">\n                              <h1>ToDos</h1>\n                          </nav>\n                <section className=\"todo-list\">\n                {todosList}\n            </section>\n            </div>\n              \n\n            )\n            }\n        }    \n\n    const mapStateToProps = state => {\n       \n        return state\n    }\n\n    const mapActionsToState = {\n        onFetchTodos: fetchTodos\n    }\n\n    \nexport default connect(mapStateToProps, mapActionsToState)(AppTodos)","import React from 'react';\nimport { HashRouter as Router, Route, Switch }from 'react-router-dom';\nimport AppUsers from './AppUsers'\nimport AppComments from './AppComments'\nimport AppPosts from './AppPosts'\nimport AppUserDetail from './AppUserDetail'\nimport AppTodos from './AppTodos'\nimport './App.css';\n\nclass App extends React.Component {\n  \n  render () {\n   \n \n  \n    return (\n\n     \n      <Router basename=\"/\">\n        <Switch>\n          <Route exact path=\"/\" component={AppUsers} />\n          <Route path=\"/users/:id\" component={AppUserDetail}/>\n          <Route path=\"/posts/:userId\" component={AppPosts}/>\n          <Route path=\"/todos/:userID\" component={AppTodos}/>\n          <Route path=\"/comments/:ID\" component={AppComments}/>     \n        </Switch>\n      </Router>\n    \n  \n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const UserReducer = (state = [], action)=> {\n    switch(action.type){\n        case \"FETCH_USERS\":\n            return action.payload\n            default:\n                return state\n    }\n}\n\nexport default UserReducer","const PostsReducer = (state = [], action)=> {\n    switch(action.type){\n        case \"FETCH_POSTS\":\n            return action.payload\n            default:\n                return state\n    }\n}\n\nexport default PostsReducer","const TodosReducer = (state = [], action)=> {\n    switch(action.type){\n        case \"FETCH_TODOS\":\n            return action.payload\n            default:\n                return state\n    }\n}\n\nexport default TodosReducer","const CommentsReducer = (state = [], action)=> {\n    switch(action.type){\n        case \"FETCH_COMMENTS\":\n            return action.payload\n            default:\n                return state\n    }\n}\n\nexport default CommentsReducer","import UserReducer from './users'\nimport PostsReducer from './posts'\nimport TodosReducer from './toDos'\nimport CommentsReducer from \"./comments\";\n\nimport {combineReducers} from 'redux'\n\nconst allReducers = combineReducers({\n    users: UserReducer,\n    posts: PostsReducer,\n    todos: TodosReducer,\n    comments: CommentsReducer\n})\n\nexport default allReducers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\nimport allReducers from './reducers/index'\n\nconst store = createStore(\n    allReducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n      <Provider store={store}>\n<App />\n</Provider>,\n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}